public Result Execute1(ExternalCommandData commandData, ref string message, ElementSet elements)
{
    // json
    Stopwatch stopwatch = new Stopwatch();
    // Запускаем таймер
    stopwatch.Start();

    Document doc = commandData.Application.ActiveUIDocument.Document;

    StringBuilder sb = new StringBuilder();
    // получил уникальные экземпляры
    var linkInstances = new FilteredElementCollector(doc)
        .OfClass(typeof(RevitLinkInstance))
        .Cast<RevitLinkInstance>()
        .GroupBy(item => item.GetTypeId().IntegerValue)
        .Select(group => group.First())
        .ToList();

    var projectLinks = new List<Dictionary<string, object>>();

    foreach (var linkInstance in linkInstances)
    {
        var linkDoc = linkInstance.GetLinkDocument();
        if (linkDoc == null) continue;
        
        // Получаем 3д вид Navisworks
        View view = new FilteredElementCollector(linkDoc).OfClass(typeof(View3D))
            .Cast<View>()
            .Where(i => !i.IsTemplate)
            .FirstOrDefault(view3d => view3d.Name == "Navisworks");

        if (view == null)
        {
            sb.AppendLine($"{linkInstance.GetType().Name}: - проект не содержит вида Navisworks");
            continue;
        }

        var linkedFileElementsNav = new FilteredElementCollector(linkDoc, view.Id)
            .WhereElementIsNotElementType()
            .ToElements()
            .Where(x => x.Category != null);


        var elementsData = new List<Dictionary<string, object>>();

        foreach (Element element in linkedFileElementsNav)
        {
            var elementData = new Dictionary<string, object>
            {
                { "ID", element.Id.IntegerValue }
            };

            var parameterList = new List<Dictionary<string, string>>();

            ParameterSet parameterSet = element.Parameters;
            foreach (Parameter parameter in parameterSet)
            {
                if (element.Category.Id.IntegerValue == (int)BuiltInCategory.OST_Cameras)
                    continue;

                if (parameter.Id.IntegerValue == (int)BuiltInParameter.ELEM_CATEGORY_PARAM_MT)
                    continue;

                string parameterName = parameter.Definition.Name;
                string parameterValue = "<none>";

                switch (parameter.StorageType)
                {
                    case StorageType.String:
                        parameterValue = string.IsNullOrEmpty(parameter.AsString()) ? "<null>" : parameter.AsString();
                        break;

                    case StorageType.Double:
                        var rounding = GetParameterAccuracy(doc, parameter);
                        int decimalPlaces = (int)Math.Abs(Math.Log10(rounding));
                        parameterValue = Math.Round(UnitUtils.ConvertFromInternalUnits(parameter.AsDouble(), parameter.GetUnitTypeId()), decimalPlaces).ToString();
                        break;

                    case StorageType.ElementId:
                        parameterValue = parameter.AsValueString();
                        break;

                    case StorageType.Integer:
                        parameterValue = parameter.AsInteger().ToString();
                        break;
                    default:
                        parameterValue = "<none>";
                        break;
                }

                parameterList.Add(new Dictionary<string, string>()
                {
                    {parameterName, parameterValue}
                });
            }
            elementData["Parameters"] = parameterList;
            elementsData.Add(elementData);
        }
        var projectData = new Dictionary<string, object>
        {
            {"LinkName", linkInstance.Name.Substring(0, linkInstance.Name.IndexOf('.'))},
            {"Elements", elementsData}
        };

        projectLinks.Add(projectData);
    }

    string json = JsonConvert.SerializeObject(projectLinks, Formatting.Indented);

    string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
    string filePath = Path.Combine(desktopPath, "elements_data.json");
    File.WriteAllText(filePath, json);

    stopwatch.Stop();
    // Получаем прошедшее время
    TimeSpan elapsedTime = stopwatch.Elapsed;

    sb.AppendLine($"Операция выполнена за {elapsedTime.TotalSeconds} секунд.");
    MessageBox.Show(sb.ToString());
    return Result.Succeeded;
}

public Result Execute5(ExternalCommandData commandData, ref string message, ElementSet elements)
{
    //jsonlist
    Stopwatch stopwatch = new Stopwatch();
    // Запускаем таймер
    stopwatch.Start();

    Document doc = commandData.Application.ActiveUIDocument.Document;

    StringBuilder sb = new StringBuilder();
    StringBuilder sbExport = new StringBuilder();
    // получил уникальные экземпляры
    var linkInstances = new FilteredElementCollector(doc)
        .OfClass(typeof(RevitLinkInstance))
        .Cast<RevitLinkInstance>()
        .GroupBy(item => item.GetTypeId().IntegerValue)
        .Select(group => group.First())
        .ToList();


    var jsonData = new List<object>();

    foreach (var linkInstance in linkInstances)
    {

        var linkDoc = linkInstance.GetLinkDocument();
        if (linkDoc == null) continue;

        // Получаем 3д вид Navisworks
        View view = new FilteredElementCollector(linkDoc).OfClass(typeof(View3D))
            .Cast<View>()
            .Where(i => !i.IsTemplate)
            .FirstOrDefault(view3d => view3d.Name == "Navisworks");

        if (view == null)
        {
            sb.AppendLine($"{linkInstance.GetType().Name}: - проект не содержит вида Navisworks");
            continue;
        }

        var linkedFileElementsNav = new FilteredElementCollector(linkDoc, view.Id)
            .WhereElementIsNotElementType()
            .ToElements()
            .Where(x => x.Category != null);

        // Убрать категории Виды

        foreach (Element element in linkedFileElementsNav)
        {
            if (element.Category.Id.IntegerValue == (int)BuiltInCategory.OST_Cameras)
                continue;

            ParameterSet parameterSet = element.Parameters;
            foreach (Parameter parameter in parameterSet)
            {
                if (parameter.Id.IntegerValue == (int)BuiltInParameter.ELEM_CATEGORY_PARAM_MT)
                    continue;

                List<object> myList = new List<object>(4);
                //myList.Add(linkInstance.Name);
                myList.Add(linkInstance.Name.Substring(0, linkInstance.Name.IndexOf('.')));
                myList.Add(element.Id.IntegerValue);
                myList.Add(parameter.Definition.Name);
                string parameterValue = "<none>";

                switch (parameter.StorageType)
                {
                    case StorageType.String:
                        parameterValue = string.IsNullOrEmpty(parameter.AsString()) ? "<null>" : parameter.AsString();
                        myList.Add(parameterValue);
                        jsonData.Add(myList);
                        break;

                    case StorageType.Double:
                        var rounding = GetParameterAccuracy(doc, parameter);
                        int decimalPlaces = (int)Math.Abs(Math.Log10(rounding));
                        parameterValue = Math.Round(UnitUtils.ConvertFromInternalUnits(parameter.AsDouble(), parameter.GetUnitTypeId()), decimalPlaces).ToString();
                        myList.Add(parameterValue);
                        jsonData.Add(myList);
                        break;

                    case StorageType.ElementId:
                        parameterValue = parameter.AsValueString();
                        myList.Add(parameterValue);
                        jsonData.Add(myList);
                        break;

                    case StorageType.Integer:
                        parameterValue = parameter.AsInteger().ToString();
                        myList.Add(parameterValue);
                        jsonData.Add(myList);
                        break;
                    default:
                        myList.Add(parameterValue);
                        jsonData.Add(myList);
                        break;
                }

            }
        }
    }
    foreach (var item in jsonData)
    {
        if (item is List<object> row)
        {
            sbExport.AppendLine(string.Join("\t", row));
        }
    }


    string json = JsonConvert.SerializeObject(jsonData, Formatting.Indented);

    string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
    string filePath = Path.Combine(desktopPath, "elements_data_list.json");
    File.WriteAllText(filePath, json);

    stopwatch.Stop();
    // Получаем прошедшее время
    TimeSpan elapsedTime = stopwatch.Elapsed;

    sb.AppendLine($"Операция выполнена за {elapsedTime.TotalSeconds} секунд.");
    MessageBox.Show(sb.ToString());
    return Result.Succeeded;
}

